<?php

namespace Tests\Unit;

use App\Repository\ArticleRepository;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Session;
use Tests\TestCase;

class ArticleControllerTest extends TestCase
{
    /**
     * A basic unit test example.
     *
     * @return void
     */
    protected $respositoryMock = null;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        // 初始化 Session ,因此需要避免 CSRF 的 token
        Session::start();

        // Mockery::mock 可以利用 Reflection 機制幫我們建立假物件
        $this->respositoryMock = \Mockery::mock('App\Repository\ArticleRepository');

        // Service Container 的 instance 方法可以讓我們用假物件取代原本的 ArticleRepository 物件
        $this->app->instance('App\Repository\ArticleRepository',$this->respositoryMock);
    }

    public function tearDown(): void
    {
        \Mockery::close();
    }

    public function testArticleList()
    {
        // 用 GET 方法瀏覽網站 /test
//        $this->call('GET', '/test');
//        $response = $this->get('/test');

        // 改用 Laravel 內建方法
        // 實際就是測試是否為 HTTP 200
//        $this->assertResponseOK(); //5.4之後無法使用
//        $response->assertStatus(200);

        // 應取得 articles 變數
//        $this->assertViewHas('articles'); //5.4之後無法使用
//        $response->assertViewHas('articles');

        //////////////////////////////////////////////////////////////////////////
        // 確認程式會呼叫一次 ArticleRepository::latest10 方法
        // 實際上是為這個 mock object 加入 latest10 方法
        // 沒有呼叫到的話就會發出異常
        // 再假設它會回傳 foo 這個字串
        // 這樣就不需要真的去連結資料庫
        $this->respositoryMock
            ->shouldReceive('latest10')
            ->once()
            ->andReturn([]);

        $response = $this->get('/test');
        $response->assertStatus(200);

        // 應取得 articles 變數
        // 而其值為空陣列
        $response->assertViewHas('articles',[]);
    }

    public function testCreateArticleSuccess()
    {
        // 模擬使用者已登入
        $this->userLoggedIn();

        // 會呼叫 ArticleRepository::create
        $this->respositoryMock
            ->shouldReceive('create')
            ->once();

        // 模擬送出表單
        $response = $this->post('/articles',[
            'title' => 'title 999',
            'body' => 'body 999',
            '_token' => csrf_token(),
        ]);

        // 完成後會導向列表頁
        $response->assertRedirect('articles');
    }

    public function testCreateArticleFails()
    {
        // 模擬使用者已登入
        $this->userLoggedIn();

        $response = $this->post('/articles', [
            '_token' => csrf_token(),
        ]);

//        $response->assertHasOldInput();
        $response->assertSessionHasErrors();

        // 應該會導回前一個 URL
        $response->assertStatus(302);
    }

//    public function testCsrfFailed()
//    {
//        // 模擬使用者已登入
//        $this->userLoggedIn();
//
//        // 模擬沒有 token 時
//        // 程式應該是輸出 500 Error
//        $response = $this->post('/articles');
//        $response->assertStatus(500);
//    }
}
